import { OnInit, AfterViewInit, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface Item {
    text: string;
    fillStyle: string;
    id: any;
}
export declare enum TextAlignment {
    INNER = "inner",
    OUTER = "outer",
    CENTER = "center"
}
export declare enum TextOrientation {
    HORIZONTAL = "horizontal",
    VERTICAL = "vertical",
    CURVED = "curved"
}
export declare class NgxWheelComponent implements OnInit, AfterViewInit {
    constructor();
    height: number;
    idToLandOn: any;
    width: number;
    items: Item[];
    spinDuration: number;
    spinAmount: number;
    innerRadius: number;
    pointerStrokeColor: string;
    pointerFillColor: string;
    disableSpinOnClick: boolean;
    textOrientation: TextOrientation;
    textAlignment: TextAlignment;
    onSpinStart: EventEmitter<any>;
    onSpinComplete: EventEmitter<any>;
    wheel: any;
    completedSpin: boolean;
    isSpinning: boolean;
    reset(): void;
    ngOnInit(): void;
    spin(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    drawPointer(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxWheelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxWheelComponent, "ngx-wheel", never, { "height": "height"; "idToLandOn": "idToLandOn"; "width": "width"; "items": "items"; "spinDuration": "spinDuration"; "spinAmount": "spinAmount"; "innerRadius": "innerRadius"; "pointerStrokeColor": "pointerStrokeColor"; "pointerFillColor": "pointerFillColor"; "disableSpinOnClick": "disableSpinOnClick"; "textOrientation": "textOrientation"; "textAlignment": "textAlignment"; }, { "onSpinStart": "onSpinStart"; "onSpinComplete": "onSpinComplete"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdoZWVsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtd2hlZWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgSXRlbSB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGZpbGxTdHlsZTogc3RyaW5nO1xuICAgIGlkOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBlbnVtIFRleHRBbGlnbm1lbnQge1xuICAgIElOTkVSID0gXCJpbm5lclwiLFxuICAgIE9VVEVSID0gXCJvdXRlclwiLFxuICAgIENFTlRFUiA9IFwiY2VudGVyXCJcbn1cbmV4cG9ydCBkZWNsYXJlIGVudW0gVGV4dE9yaWVudGF0aW9uIHtcbiAgICBIT1JJWk9OVEFMID0gXCJob3Jpem9udGFsXCIsXG4gICAgVkVSVElDQUwgPSBcInZlcnRpY2FsXCIsXG4gICAgQ1VSVkVEID0gXCJjdXJ2ZWRcIlxufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4V2hlZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgaWRUb0xhbmRPbjogYW55O1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaXRlbXM6IEl0ZW1bXTtcbiAgICBzcGluRHVyYXRpb246IG51bWJlcjtcbiAgICBzcGluQW1vdW50OiBudW1iZXI7XG4gICAgaW5uZXJSYWRpdXM6IG51bWJlcjtcbiAgICBwb2ludGVyU3Ryb2tlQ29sb3I6IHN0cmluZztcbiAgICBwb2ludGVyRmlsbENvbG9yOiBzdHJpbmc7XG4gICAgZGlzYWJsZVNwaW5PbkNsaWNrOiBib29sZWFuO1xuICAgIHRleHRPcmllbnRhdGlvbjogVGV4dE9yaWVudGF0aW9uO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQ7XG4gICAgb25TcGluU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU3BpbkNvbXBsZXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB3aGVlbDogYW55O1xuICAgIGNvbXBsZXRlZFNwaW46IGJvb2xlYW47XG4gICAgaXNTcGlubmluZzogYm9vbGVhbjtcbiAgICByZXNldCgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgc3BpbigpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZHJhd1BvaW50ZXIoKTogdm9pZDtcbn1cbiJdfQ==